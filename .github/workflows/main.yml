name: torf-cli
on:
  workflow_dispatch:
    inputs:
      root-reserve-mb:
        description: 'Space to be left free on the root filesystem, in Megabytes.'
        required: false
        default: '1024'
      temp-reserve-mb:
        description: 'Space to be left free on the temp filesystem (/mnt), in Megabytes.'
        required: false
        default: '100'
      swap-size-mb:
        description: 'Swap space to create, in Megabytes.'
        required: false
        default: '4096'
      overprovision-lvm:
        description: |
          Create the LVM disk images as sparse files, making the space required for the LVM image files *appear* unused on the
          hosting volumes until actually allocated. Use with care, this can lead to surprising out-of-disk-space situations.
          You should prefer adjusting root-reserve-mb/temp-reserve-mb over using this option.
        required: false
        default: 'false'
      build-mount-path:
        description: 'Absolute path to the mount point where the build space will be available, defaults to $GITHUB_WORKSPACE if unset.'
        required: false
      pv-loop-path:
        description: 'Absolute file path for the LVM image created on the root filesystem, the default is usually fine.'
        required: false
        default: '/pv.img'
      tmp-pv-loop-path:
        description: 'Absolute file path for the LVM image created on the temp filesystem, the default is usually fine. Must reside on /mnt'
        required: false
        default: '/mnt/tmp-pv.img'
      remove-dotnet:
        description: 'Removes .NET runtime and libraries. (frees ~17 GB)'
        required: false
        default: 'false'
      remove-android:
        description: 'Removes Android SDKs and Tools. (frees ~11 GB)'
        required: false
        default: 'false'
      remove-haskell:
        description: 'Removes GHC (Haskell) artifacts. (frees ~2.7 GB)'
        required: false
        default: 'false'
    
    
jobs:
  create_torrent:
    runs-on: ubuntu-latest
    steps:
    
      - name: clean unncessary files
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
          sudo apt -y autoremove --purge
          sudo apt -y autoclean
          sudo apt clean
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df -h
      
      - name: Disk space report before modification
        shell: bash
        run: |
          echo "Memory and swap:"
          free
          echo
          swapon --show
          echo
          echo "Available storage:"
          df -h
          echo
      - name: Maximize build disk space
        shell: bash
        run: |
            set -euo pipefail
            BUILD_MOUNT_PATH="${{ inputs.build-mount-path }}"
            if [[ -z "${BUILD_MOUNT_PATH}" ]]; then
              BUILD_MOUNT_PATH="${GITHUB_WORKSPACE}"
            fi
            echo "Arguments:"
            echo
            echo "  Root reserve:      ${{ inputs.root-reserve-mb }} MiB"
            echo "  Temp reserve:      ${{ inputs.temp-reserve-mb }} MiB"
            echo "  Swap space:        ${{ inputs.swap-size-mb }} MiB"
            echo "  Overprovision LVM: ${{ inputs.overprovision-lvm }}"
            echo "  Mount path:        ${BUILD_MOUNT_PATH}"
            echo "  Root PV loop path: ${{ inputs.pv-loop-path }}"
            echo "  Temp PV loop path: ${{ inputs.tmp-pv-loop-path }}"
            echo -n "  Removing:     "
            if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
              echo -n "dotnet "
            fi
            if [[ ${{ inputs.remove-android }} == 'true' ]]; then
              echo -n "android "
            fi
            if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
              echo -n "haskell "
            fi
            echo
            echo "Removing unwanted software... "
            if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
              sudo rm -rf /usr/share/dotnet
            fi
            if [[ ${{ inputs.remove-android }} == 'true' ]]; then
              sudo rm -rf /usr/local/lib/android
            fi
            if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
              sudo rm -rf /opt/ghc
            fi
            echo "... done"
            VG_NAME=buildvg
            # github runners have an active swap file in /mnt/swapfile
            # we want to reuse the temp disk, so first unmount swap and clean the temp disk
            echo "Unmounting and removing swap file."
            sudo swapoff -a
            sudo rm -f /mnt/swapfile
            echo "Creating LVM Volume."
            echo "  Creating LVM PV on root fs."
            # create loop pv image on root fs
            ROOT_RESERVE_KB=$(expr ${{ inputs.root-reserve-mb }} \* 1024)
            ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
            ROOT_LVM_SIZE_KB=$(expr $ROOT_FREE_KB - $ROOT_RESERVE_KB)
            ROOT_LVM_SIZE_BYTES=$(expr $ROOT_LVM_SIZE_KB \* 1024)
            sudo touch "${{ inputs.pv-loop-path }}" && sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "${{ inputs.pv-loop-path }}"
            export ROOT_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.pv-loop-path }}")
            sudo pvcreate -f "${ROOT_LOOP_DEV}"
            # create pv on temp disk
            echo "  Creating LVM PV on temp fs."
            TMP_RESERVE_KB=$(expr ${{ inputs.temp-reserve-mb }} \* 1024)
            TMP_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
            TMP_LVM_SIZE_KB=$(expr $TMP_FREE_KB - $TMP_RESERVE_KB)
            TMP_LVM_SIZE_BYTES=$(expr $TMP_LVM_SIZE_KB \* 1024)
            sudo touch "${{ inputs.tmp-pv-loop-path }}" && sudo fallocate -z -l "${TMP_LVM_SIZE_BYTES}" "${{ inputs.tmp-pv-loop-path }}"
            export TMP_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.tmp-pv-loop-path }}")
            sudo pvcreate -f "${TMP_LOOP_DEV}"
            # create volume group from these pvs
            sudo vgcreate "${VG_NAME}" "${TMP_LOOP_DEV}" "${ROOT_LOOP_DEV}"
            echo "Recreating swap"
            # create and activate swap
            sudo lvcreate -L "${{ inputs.swap-size-mb }}M" -n swap "${VG_NAME}"
            sudo mkswap "/dev/mapper/${VG_NAME}-swap"
            sudo swapon "/dev/mapper/${VG_NAME}-swap"
            echo "Creating build volume"
            # create and mount build volume
            sudo lvcreate -l 100%FREE -n buildlv "${VG_NAME}"
            if [[ ${{ inputs.overprovision-lvm }} == 'true' ]]; then
              sudo mkfs.ext4 -m0 "/dev/mapper/${VG_NAME}-buildlv"
            else
              sudo mkfs.ext4 -Enodiscard -m0 "/dev/mapper/${VG_NAME}-buildlv"
            fi
            sudo mount "/dev/mapper/${VG_NAME}-buildlv" "${BUILD_MOUNT_PATH}"
            sudo chown -R runner "${BUILD_MOUNT_PATH}"
            sudo chgrp -R runner "${BUILD_MOUNT_PATH}"
            
            docker pull tensorflow/tensorflow
            docker pull gettyimages/spark
            docker pull timescale/timescaledb:latest-pg14
            docker pull linuxserver/digikam
            docker pull ich777/krusader
            docker pull emekaboris/ticktokapp_copy
            docker pull emekaboris/text_generation_with_pytorch
            docker pull emekaboris/summarizerapi3
            docker pull linuxserver/calibre
            docker pull binhex/arch-krusader
            docker pull binhex/arch-delugevpn
            docker pull cassandra
            docker pull ibmcom/voice-gateway-codec-g729
            docker pull pachyderm/gpt-2-example
            docker pull kaveenk/gpt3discord
            docker pull gkswjdzz/gpt3-kor-based-gpt2-0.3.0
            docker pull baurjan0224/gpt3
            docker pull fillsa/powerpc-ubuntu
            



            
            
            
            
        




























# name: Github action for Docker to ECR


# on:
#  push:
#   branches: master
  
  
  
# jobs:


# #   start-runner:
# #     name: Start self-hosted EC2 runner
# #     runs-on: ubuntu-latest
# #     outputs:
# #       label: ${{ steps.start-ec2-runner.outputs.label }}
# #       ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
# #     steps:
# #       - name: Configure AWS credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #           aws-region: ${{ secrets.AWS_REGION }}
# #       - name: Start EC2 runner
# #         id: start-ec2-runner
# #         uses: machulav/ec2-github-runner@v2
# #         with:
# #           mode: start
# #           github-token: ${{ secrets.GH_SECRET }}
# #           ec2-image-id: ami-081c3d54ed3ae4f95
# #           ec2-instance-type: t3.2xlarge
# #           subnet-id: subnet-0889726d0af44a2d5
# #           security-group-id: sg-06d6beebb00e6ed24
# # #           iam-role-name: ec2-github-runner-policy # optional, requires additional permissions
# #           aws-resource-tags: > # optional, requires additional permissions
# #             [
# #               {"Key": "Name", "Value": "ec2-github-runner"},
# #               {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
# #             ]



         
 









#   build:
#     name: Build my artifact
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Maximize build disk space
#         shell: bash
#         run: |
#             set -euo pipefail
#             BUILD_MOUNT_PATH="${{ inputs.build-mount-path }}"
#             if [[ -z "${BUILD_MOUNT_PATH}" ]]; then
#               BUILD_MOUNT_PATH="${GITHUB_WORKSPACE}"
#             fi
#             echo "Arguments:"
#             echo
#             echo "  Root reserve:      ${{ inputs.root-reserve-mb }} MiB"
#             echo "  Temp reserve:      ${{ inputs.temp-reserve-mb }} MiB"
#             echo "  Swap space:        ${{ inputs.swap-size-mb }} MiB"
#             echo "  Overprovision LVM: ${{ inputs.overprovision-lvm }}"
#             echo "  Mount path:        ${BUILD_MOUNT_PATH}"
#             echo "  Root PV loop path: ${{ inputs.pv-loop-path }}"
#             echo "  Temp PV loop path: ${{ inputs.tmp-pv-loop-path }}"
#             echo -n "  Removing:     "
#             if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
#               echo -n "dotnet "
#             fi
#             if [[ ${{ inputs.remove-android }} == 'true' ]]; then
#               echo -n "android "
#             fi
#             if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
#               echo -n "haskell "
#             fi
#             echo
#             echo "Removing unwanted software... "
#             if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
#               sudo rm -rf /usr/share/dotnet
#             fi
#             if [[ ${{ inputs.remove-android }} == 'true' ]]; then
#               sudo rm -rf /usr/local/lib/android
#             fi
#             if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
#               sudo rm -rf /opt/ghc
#             fi
#             echo "... done"
#             VG_NAME=buildvg
#             # github runners have an active swap file in /mnt/swapfile
#             # we want to reuse the temp disk, so first unmount swap and clean the temp disk
#             echo "Unmounting and removing swap file."
#             sudo swapoff -a
#             sudo rm -f /mnt/swapfile
#             echo "Creating LVM Volume."
#             echo "  Creating LVM PV on root fs."
#             # create loop pv image on root fs
#             ROOT_RESERVE_KB=$(expr ${{ inputs.root-reserve-mb }} \* 1024)
#             ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
#             ROOT_LVM_SIZE_KB=$(expr $ROOT_FREE_KB - $ROOT_RESERVE_KB)
#             ROOT_LVM_SIZE_BYTES=$(expr $ROOT_LVM_SIZE_KB \* 1024)
#             sudo touch "${{ inputs.pv-loop-path }}" && sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "${{ inputs.pv-loop-path }}"
#             export ROOT_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.pv-loop-path }}")
#             sudo pvcreate -f "${ROOT_LOOP_DEV}"
#             # create pv on temp disk
#             echo "  Creating LVM PV on temp fs."
#             TMP_RESERVE_KB=$(expr ${{ inputs.temp-reserve-mb }} \* 1024)
#             TMP_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
#             TMP_LVM_SIZE_KB=$(expr $TMP_FREE_KB - $TMP_RESERVE_KB)
#             TMP_LVM_SIZE_BYTES=$(expr $TMP_LVM_SIZE_KB \* 1024)
#             sudo touch "${{ inputs.tmp-pv-loop-path }}" && sudo fallocate -z -l "${TMP_LVM_SIZE_BYTES}" "${{ inputs.tmp-pv-loop-path }}"
#             export TMP_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.tmp-pv-loop-path }}")
#             sudo pvcreate -f "${TMP_LOOP_DEV}"
#             # create volume group from these pvs
#             sudo vgcreate "${VG_NAME}" "${TMP_LOOP_DEV}" "${ROOT_LOOP_DEV}"
#             echo "Recreating swap"
#             # create and activate swap
#             sudo lvcreate -L "${{ inputs.swap-size-mb }}M" -n swap "${VG_NAME}"
#             sudo mkswap "/dev/mapper/${VG_NAME}-swap"
#             sudo swapon "/dev/mapper/${VG_NAME}-swap"
#             echo "Creating build volume"
#             # create and mount build volume
#             sudo lvcreate -l 100%FREE -n buildlv "${VG_NAME}"
#             if [[ ${{ inputs.overprovision-lvm }} == 'true' ]]; then
#               sudo mkfs.ext4 -m0 "/dev/mapper/${VG_NAME}-buildlv"
#             else
#               sudo mkfs.ext4 -Enodiscard -m0 "/dev/mapper/${VG_NAME}-buildlv"
#             fi
#             sudo mount "/dev/mapper/${VG_NAME}-buildlv" "${BUILD_MOUNT_PATH}"
#             sudo chown -R runner "${BUILD_MOUNT_PATH}"
#             sudo chgrp -R runner "${BUILD_MOUNT_PATH}"
#       - name: clean unncessary files
#         run: |
#           docker rmi `docker images -q`
#           sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
#           sudo apt -y autoremove --purge
#           sudo apt -y autoclean
#           sudo apt clean
#           rm --recursive --force "$AGENT_TOOLSDIRECTORY"
#           df -h
           
#       - name:  Maximize build space
#         uses: easimon/maximize-build-space@v6
#         with:
#           root-reserve-mb: 512
#           swap-size-mb: 1024
        
        
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           path: aws-ecr-docker
        
#       - name: AWS cred
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#             aws-region: ${{ secrets.AWS_REGION }}

     

#       - name: Build
#         id: withfreespace
#         run: |
#           echo "Free space:"
#           ls
#           cd $ {{ GITHUB_WORKSPACE }}
          
#           #docker rmi `docker images -q`
#           docker pull tensorflow/tensorflow
#           docker pull gettyimages/spark
#           docker pull timescale/timescaledb:latest-pg14
#           docker pull linuxserver/digikam
#           docker pull ich777/krusader
#           docker pull emekaboris/ticktokapp_copy
#           docker pull emekaboris/text_generation_with_pytorch
#           docker pull emekaboris/summarizerapi3
#           docker pull linuxserver/calibre
#           docker pull binhex/arch-krusader
           
           
#           docker pull binhex/arch-delugevpn
#           docker pull cassandra
#           docker pull ibmcom/voice-gateway-codec-g729
#           docker pull pachyderm/gpt-2-example
#           docker pull kaveenk/gpt3discord
#           docker pull gkswjdzz/gpt3-kor-based-gpt2-0.3.0
#           docker pull baurjan0224/gpt3
#           docker pull fillsa/powerpc-ubuntu
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker system df
#           docker tag tensorflow/tensorflow:latest 224066078089.dkr.ecr.us-east-2.amazonaws.com/st_cloud_first_version:latest
#           docker images
#           echo "Pushing image to ECR..."
#           #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          
# #       - name: Run with custom runner
      
# #         if: steps.withfreespace.outcome == 'failure'
